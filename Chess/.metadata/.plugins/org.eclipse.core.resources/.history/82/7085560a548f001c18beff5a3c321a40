package chess;

import java.util.Scanner;

import AI.Coup;
import AI.iterative_deepening;


// cette classe sert surtout a tester les fonctions mises en place, le vrai main sera celui de gui

public class Main {

	public static Board variable_mock_board = new Board();
	
	public static void dpl(Board board, int i, int j, int k, int l) {
		try {
			board.board[i][j].piece.deplacement(k, l, board, variable_mock_board);
		} catch (Exception e) {
			
		}
	}
	
	
	public static void main(String[] args) throws DeplacementNonValableException, CheckmateException {
		long t0 = System.currentTimeMillis();
		
		Board board = new Board();
		board.newGameBoard(); 
		
		board.board[6][4].piece.deplacement(4, 4, board, variable_mock_board);
		board.board[0][6].piece.deplacement(2, 2, board, variable_mock_board);
		
		board.display();
		long t1 = System.currentTimeMillis();
		System.out.println("Total time: " + (t1-t0) + " ms");		
		
		/*
		Scanner sc = new Scanner(System.in);
	    //String userName = sc.nextLine();  // Read user input
		double score = 0;
		
		board.board[6][4].piece.deplacement(4,  4, board, variable_mock_board);
		board.board[1][4].piece.deplacement(3, 4, board, variable_mock_board);
		board.board[7][6].piece.deplacement(5, 5, board, variable_mock_board);
		board.board[0][1].piece.deplacement(2, 2, board, variable_mock_board);
		board.board[7][5].piece.deplacement(3, 1, board, variable_mock_board);
		board.board[0][6].piece.deplacement(2, 5, board, variable_mock_board);
		((King)board.board[7][4].piece).petitRoque(board);
		board.board[2][5].piece.deplacement(4, 4, board, variable_mock_board);
		board.board[6][3].piece.deplacement(4, 3, board, variable_mock_board);		
		board.board[4][4].piece.deplacement(2, 3, board, variable_mock_board);
		board.board[3][1].piece.deplacement(2, 2, board, variable_mock_board);
		board.board[1][3].piece.deplacement(2, 2, board, variable_mock_board);
		board.board[5][5].piece.deplacement(3, 4, board, variable_mock_board);
		board.board[0][5].piece.deplacement(1, 4, board, variable_mock_board);
		dpl(board, 6, 2, 4, 2);
		dpl(board, 0, 2, 3, 5);
		dpl(board, 7, 1, 5, 2);
		dpl(board, 1, 4, 2, 5);
		dpl(board, 6, 6, 4, 6);
		dpl(board, 3, 5, 2, 4);
		dpl(board, 4, 2, 3, 2);
		dpl(board, 2, 3, 0, 2);
		dpl(board, 7, 2, 5, 4);
		dpl(board, 2, 5, 3, 4);
		
		
		
		
		board.display();
		
	    int stateOfTheGame = board.checkmatedKing();
	    boolean moveValid;
	    while (stateOfTheGame == 0) {
	    	moveValid = false;
	    	while (! moveValid) {
	    		System.out.println("Quelle piece deplacer ?");
		    	String coor_piece = sc.next();
		    	char colonne = coor_piece.charAt(0);
		    	char ligne = coor_piece.charAt(coor_piece.length()-1);
		    	int i_piece = 8 - Character.getNumericValue(ligne);
		    	int j_piece = (int)colonne - 97;
		    	
		    	System.out.println("Sur quelle case deplacer cette piece ?");
		    	String case_ = sc.next();
		    	char col_case = case_.charAt(0);
		    	char li_case = case_.charAt(case_.length()-1);
		    	int i_case = 8 - Character.getNumericValue(li_case);
		    	int j_case = (int)col_case - 97;
		    	
		    	if (board.board[i_case][j_case].piece == null) {
		    		gui.sounds.sound_move();
		    	} else {
		    		gui.sounds.sound_capture();
		    	}
		    	try {
			    	board.board[i_piece][j_piece].piece.deplacement(i_case, j_case, board, variable_mock_board);
			    	moveValid = true;
		    	} catch (Exception e) {
		    		System.out.println("Ce coup n'est pas valide");
		    	}
	    	}
	    	
	    	
	    	
	    	board.display();
	    	score = AI.Evaluation.positionEvaluation(board)/100;
	    	System.out.println("Score = " + score);
	    	System.out.println();
	    	System.gc();
	    	stateOfTheGame = board.checkmatedKing();
	    	if (stateOfTheGame != 0) {
	    		System.out.println("Checkmate !");
	    		break;
	    	} else {
	    		iterative_deepening.playTheBestMove(board);
	    		Coup lastMove = board.coupsJoues.get(board.nb_coups_joues-1);
	    		if (lastMove.piece_capturee == null) {
	    			gui.sounds.sound_move();
	    			gui.sounds.sound_move();
	    			gui.sounds.sound_move();
	    			gui.sounds.sound_move();
	    		} else {
	    			gui.sounds.sound_capture();
	    			gui.sounds.sound_capture();
	    			gui.sounds.sound_capture();
	    			gui.sounds.sound_capture();
	    		}
	    		board.display();
		    	score = AI.Evaluation.positionEvaluation(board)/100;
		    	System.out.println("Score = " + score);
		    	System.out.println();
		    	System.gc();
		    	stateOfTheGame = board.checkmatedKing();
	    	}
	    }
		
		*/
		
	}
	

}
