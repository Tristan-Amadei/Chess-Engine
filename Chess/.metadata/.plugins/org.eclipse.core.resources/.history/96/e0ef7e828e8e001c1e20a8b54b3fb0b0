package game;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import game.pieces.*;
import game.pieces.PieceTypeClass.PieceType;
import game.MoveTypeClass.MoveType;

public class Board {
	
	public Piece[][] board;
	public boolean colorToPlay;
	public List<Move> movesPlayed; // list here, and note hashset bc we need to know what the moves contained are w/o knowing them by advance
	public List<Short> inGamePieces;
	public short whiteKingPosition;
	public short blackKingPosition;
	
	public Board() {
		Piece[][] gameBoard = new Piece[8][8];
		this.board = gameBoard;
		this.movesPlayed = new ArrayList<Move>();
		this.inGamePieces = new ArrayList<Short>();
	}
	
	public void newGameBoard() {
		colorToPlay = true;
		whiteKingPosition = (short)74;
		blackKingPosition = (short)04;
		// Set up the Black side
		board[0][0] = new Rook(false);
		inGamePieces.add((short)(10*0+0));
		board[0][1] = new Knight(false);
		inGamePieces.add((short)(10*0+1));
		board[0][2] = new Bishop(false);
		inGamePieces.add((short)(10*0+2));
		board[0][3] = new Queen(false);
		inGamePieces.add((short)(10*0+3));
		board[0][4] = new King(false);
		inGamePieces.add((short)(10*0+4));
		board[0][5] = new Bishop(false);
		inGamePieces.add((short)(10*0+5));
		board[0][6] = new Knight(false);
		inGamePieces.add((short)(10*0+6));
		board[0][7] = new Rook(false);
		inGamePieces.add((short)(10*0+7));
		
		// Set up the White side
		board[7][0] = new Rook(true);
		inGamePieces.add((short)(10*7+0));
		board[7][1] = new Knight(true);
		inGamePieces.add((short)(10*7+1));
		board[7][2] = new Bishop(true);
		inGamePieces.add((short)(10*7+2));
		board[7][3] = new Queen(true);
		inGamePieces.add((short)(10*7+3));
		board[7][4] = new King(true);
		inGamePieces.add((short)(10*7+4));
		board[7][5] = new Bishop(true);
		inGamePieces.add((short)(10*7+5));
		board[7][6] = new Knight(true);
		inGamePieces.add((short)(10*7+6));
		board[7][7] = new Rook(true);
		inGamePieces.add((short)(10*7+7));
		
		// Set up the pawns
		for (int i=0; i<8; i++) {
			board[6][i] = new Pawn(true);
			inGamePieces.add((short)(10*6+i));
			board[1][i] = new Pawn(false);
			inGamePieces.add((short)(10*1+i));
		}
	}
	
	public void display() {
		System.out.println("+---------+---------+---------+---------+---------+---------+---------+---------+");
		for (int i=0; i<8; i++) {
			for (int j=0; j<8; j++) {
				System.out.print("|");
				if (board[i][j] != null) {
					board[i][j].display();
				} else {
					System.out.print("        ");
				}
				System.out.print(" ");
			}
			System.out.print("|");
			System.out.println();
			System.out.println("+---------+---------+---------+---------+---------+---------+---------+---------+");
		}
	}
	
	public void playInConsole() {
		Scanner sc = new Scanner(System.in);
		String keepGoing = "yes";
		this.display();
		while (!keepGoing.equals("no")) {
			
			boolean moveValid = false;
			while (! moveValid) {
				System.out.println("What piece to move ?");
		    	String coor_piece = sc.next();
		    	char colonne = coor_piece.charAt(0);
		    	char ligne = coor_piece.charAt(coor_piece.length()-1);
		    	int i_piece = 8 - Character.getNumericValue(ligne);
		    	int j_piece = (int)colonne - 97;
		    	
		    	System.out.println("What square to move it onto ?");
		    	String case_ = sc.next();
		    	char col_case = case_.charAt(0);
		    	char li_case = case_.charAt(case_.length()-1);
		    	int i_case = 8 - Character.getNumericValue(li_case);
		    	int j_case = (int)col_case - 97;
		    	
		    	try {
		    		board[i_piece][j_piece].movePiece(this, i_piece, j_piece, i_case, j_case);
		    		moveValid = true;
		    	} catch (IllegalMoveException illegal) {
		    		System.out.println("Invalid Move");
		    	} catch (Exception e) {
		    		System.out.println(e.getStackTrace());
		    	}
		    	this.display();
		    	System.out.println("Wish to keep playing ? Enter yes if so");
		    	keepGoing = sc.next();
			}
		}
		sc.close();
	}
	
	public void unmakeMoveEnPassant() {
		Move lastMove = movesPlayed.get(movesPlayed.size()-1);
		if (lastMove.getMoveType() == MoveType.EnPassant) {
			int start_line = lastMove.getStartSquare()/10;
			int start_col = lastMove.getStartSquare() - 10*start_line;
			int landing_line = lastMove.getLandingSquare()/10;
			int landing_col = lastMove.getLandingSquare() - 10*landing_line;
			
			board[start_line][start_col] = board[landing_line][landing_col];
			inGamePieces.add(lastMove.getStartSquare());
			board[landing_line][landing_col] = null;
			inGamePieces.remove((Object)(lastMove.getLandingSquare()));
			
			boolean colorOfPawnCapturing = lastMove.getColorOfPiece();
			board[start_line][landing_col] = new Pawn(!colorOfPawnCapturing);
			inGamePieces.add((short)(10*start_line + landing_col));
			
			colorToPlay = !colorToPlay;
			movesPlayed.remove(movesPlayed.size()-1);
		}
	}
	
	public void unmakeMoveKingSideCastle() {
		Move lastMove = movesPlayed.get(movesPlayed.size()-1);
		if (lastMove.getMoveType() == MoveType.KingSideCastle) {
			int start_line = lastMove.getStartSquare()/10;
			int start_col = lastMove.getStartSquare() - 10*start_line;
			int landing_line = lastMove.getLandingSquare()/10;
			int landing_col = lastMove.getLandingSquare() - 10*landing_line;
			
			board[start_line][start_col] = board[landing_line][landing_col];
			inGamePieces.add(lastMove.getStartSquare());
			board[landing_line][landing_col] = null;
			inGamePieces.remove((Object)(lastMove.getLandingSquare()));
			
			board[landing_line][landing_col+1] = board[landing_line][start_col+1];
			inGamePieces.add((short)(10*landing_line + landing_col+1));
			board[landing_line][start_col+1] = null;
			inGamePieces.remove((Object)((short)(10*landing_line + start_col+1)));
			
			((King) board[start_line][4]).hasMoved = false; //necessarily false otherwise castling would not have been possible
			((Rook) board[start_line][7]).hasMoved = false;
			
			if (landing_line == 0) { //black king
				blackKingPosition = (short) (04);
			} else {
				whiteKingPosition = (short) (74);
			}
			
			colorToPlay = !colorToPlay;
			movesPlayed.remove(movesPlayed.size()-1);
		}
	}
	
	public void unmakeMoveQueenSideCastle() {
		Move lastMove = movesPlayed.get(movesPlayed.size()-1);
		if (lastMove.getMoveType() == MoveType.QueenSideCastle) {
			int start_line = lastMove.getStartSquare()/10;
			int start_col = lastMove.getStartSquare() - 10*start_line;
			int landing_line = lastMove.getLandingSquare()/10;
			int landing_col = lastMove.getLandingSquare() - 10*landing_line;
			
			board[start_line][start_col] = board[landing_line][landing_col];
			inGamePieces.add(lastMove.getStartSquare());
			board[landing_line][landing_col] = null;
			inGamePieces.remove((Object)(lastMove.getLandingSquare()));
			
			board[landing_line][0] = board[landing_line][start_col-1];
			inGamePieces.add((short)(10*landing_line + 0));
			board[landing_line][start_col-1] = null;
			inGamePieces.remove((Object)((short)(10*landing_line + start_col-1)));
			
			((King) board[start_line][4]).hasMoved = false; //necessarily false otherwise castling would not have been possible
			((Rook) board[start_line][0]).hasMoved = false;
			
			if (landing_line == 0) { //black king
				blackKingPosition = (short) (04);
			} else {
				whiteKingPosition = (short) (74);
			}
			
			colorToPlay = !colorToPlay;
			movesPlayed.remove(movesPlayed.size()-1);
		}
	}
	
	public void unmakeMoveNormal() {
		Move lastMove = movesPlayed.get(movesPlayed.size()-1);
		if (lastMove.getMoveType() == MoveType.Normal) {
			int start_line = lastMove.getStartSquare()/10;
			int start_col = lastMove.getStartSquare() - 10*start_line;
			int landing_line = lastMove.getLandingSquare()/10;
			int landing_col = lastMove.getLandingSquare() - 10*landing_line;
			
			board[start_line][start_col] = board[landing_line][landing_col];
			inGamePieces.add(lastMove.getStartSquare());
			
			if (lastMove.getCapturedPiece() == null) {
				board[landing_line][landing_col] = null;
				inGamePieces.remove((Object)(lastMove.getLandingSquare()));
			} else {
				switch(lastMove.getCapturedPiece()) {
				case Pawn:
					board[landing_line][landing_col] = new Pawn(!lastMove.getColorOfPiece());
					break;
				case Bishop:
					board[landing_line][landing_col] = new Bishop(!lastMove.getColorOfPiece());
					break;
				case Knight:
					board[landing_line][landing_col] = new Knight(!lastMove.getColorOfPiece());
					break;
				case Rook:
					board[landing_line][landing_col] = new Rook(!lastMove.getColorOfPiece());
					break;
				case Queen:
					board[landing_line][landing_col] = new Queen(!lastMove.getColorOfPiece());
					break;	
				case King:
					board[landing_line][landing_col] = new King(!lastMove.getColorOfPiece());
					break;
				}
			}
			
			if (lastMove.getMovedPiece() == PieceType.King) {
				if (lastMove.getColorOfPiece()) {
					whiteKingPosition = (short)(10*start_line + start_col);
				}
			}
			
			colorToPlay = !colorToPlay;			
			movesPlayed.remove(movesPlayed.size()-1);
		}
	}
	
	public void unmakeMovePromotion() {
		Move lastMove = movesPlayed.get(movesPlayed.size()-1);
		if (lastMove.getMoveType() == MoveType.Promotion) {
			int start_line = lastMove.getStartSquare()/10;
			int start_col = lastMove.getStartSquare() - 10*start_line;
			int landing_line = lastMove.getLandingSquare()/10;
			int landing_col = lastMove.getLandingSquare() - 10*landing_line;
			
			board[start_line][start_col] = new Pawn(lastMove.getColorOfPiece());
			board[landing_line][landing_col] = null;
			inGamePieces.add(lastMove.getStartSquare());
			
			if (lastMove.getCapturedPiece() == null) {
				board[landing_line][landing_col] = null;
				inGamePieces.remove((Object)(lastMove.getLandingSquare()));
			} else {
				switch(lastMove.getCapturedPiece()) {
				case Pawn:
					board[landing_line][landing_col] = new Pawn(!lastMove.getColorOfPiece());
					break;
				case Bishop:
					board[landing_line][landing_col] = new Bishop(!lastMove.getColorOfPiece());
					break;
				case Knight:
					board[landing_line][landing_col] = new Knight(!lastMove.getColorOfPiece());
					break;
				case Rook:
					board[landing_line][landing_col] = new Rook(!lastMove.getColorOfPiece());
					break;
				case Queen:
					board[landing_line][landing_col] = new Queen(!lastMove.getColorOfPiece());
					break;
				case King:
					board[landing_line][landing_col] = new King(!lastMove.getColorOfPiece());
					break;
				}
			}
			
			colorToPlay = !colorToPlay;
			movesPlayed.remove(movesPlayed.size()-1);
		}
	}
	
	public void unmakeMove() {
		Move lastMove = movesPlayed.get(movesPlayed.size()-1);
		switch(lastMove.getMoveType()) {
		case EnPassant:
			unmakeMoveEnPassant();
			break;
		case KingSideCastle:
			unmakeMoveKingSideCastle();
			break;
		case QueenSideCastle:
			unmakeMoveQueenSideCastle();
			break;
		case Normal:
			unmakeMoveNormal();
			break;
		case Promotion:
			unmakeMovePromotion();
			break;
		}
	}
	
	public short getKingPosition(boolean color) {
		if (color) {
			return whiteKingPosition;
		} else {
			return blackKingPosition;
		}
	}
	
	// function that checks whether the white king has already moved during the game or not
	// used to properly define the .hasMoved of said king inside the unmakeMove() function
	public boolean whiteKingHasAlreadyMoved() {
		if (whiteKingPosition != (short)74) {
			return true;
		}
		short possible_square_to_move_to[] = {(short)73, (short)75, (short)63, (short)64, (short)65};
		for (short square : possible_square_to_move_to) {
			if (movesPlayed.contains((Object) square)) {
				return true;
			}
		}
		return false;
	}
	
	public boolean blackKingHasAlreadyMoved() {
		if (blackKingPosition != (short)04) {
			return true;
		}
		short possible_square_to_move_to[] = {(short)03, (short)05, (short)03, (short)04, (short)05};
		for (short square : possible_square_to_move_to) {
			if (movesPlayed.contains((Object) square)) {
				return true;
			}
		}
		return false;
	}
}
