package game.tests;

import java.util.HashSet;

import game.Board;

public class GamePlay extends Thread {
	
	public Board board;
	public int line;
	public int col;
	public int depth;
	public int nbOfMoves;
	
	public GamePlay(Board board, int line, int col, int depth, int nbOfMoves) {
		this.board = board;
		this.line = line;
		this.col = col;
		this.depth = depth;
		this.nbOfMoves = nbOfMoves;
	}
	
	@Override
	public void run() {
		if (depth == 0) {
			nbOfMoves += 1;
		}
		if (board.board[line][col] != null && board.board[line][col].getColor() == board.colorToPlay) {
			HashSet<Short> moves = board.board[line][col].legalMoves(board, line, col);
			if (moves.size() > 0) {
				for (short move : moves) {
					try {
						board.board[line][col].movePiece(board, line, col, move/10, move-10*(move/10));
						GamePlay new_thread = new GamePlay(board, move/10, move-10*(move/10), depth-1, 0);
						new_thread.start();
						nbOfMoves += new_thread.nbOfMoves;
						board.unmakeMove();
					} catch (Exception e) {
						//System.out.println("depth: " + depth + " | " + board.board[line][col].getType() + " : [" + line + ", " + col + "] -> [" + move/10 + ", " + (move-10*(move/10)) + "]");
					}
				}
			}
		}
	}

	public static int numberOfMoves(Board board, int depth) {
		int nbOfMoves = 0;
		if (depth == 0) {
			return 1;
		}
		for (int line = 0; line<8; line++) {
			for (int col=0; col < 8; col++) {
				if (board.board[line][col] != null && board.board[line][col].getColor() == board.colorToPlay) {
					HashSet<Short> moves = board.board[line][col].legalMoves(board, line, col);
					if (moves.size() > 0) {
						for (short move : moves) {
							try {
								board.board[line][col].movePiece(board, line, col, move/10, move-10*(move/10));
								nbOfMoves += numberOfMoves(board, depth-1);
								board.unmakeMove();
							} catch (Exception e) {
								//System.out.println("depth: " + depth + " | " + board.board[line][col].getType() + " : [" + line + ", " + col + "] -> [" + move/10 + ", " + (move-10*(move/10)) + "]");
							}
						}
					}
				}
			}
		}
		return nbOfMoves;
	}
	
	public static int multiThread_nbMoves(Board board, int depth) {
		int final_nbMoves = 0;
		for (int line = 0; line<8; line++) {
			for (int col=0; col < 8; col++) {
				GamePlay new_thread = new GamePlay(board, line, col, depth, 0);
				new_thread.start();
				final_nbMoves += new_thread.nbOfMoves;
			}
		}
		return final_nbMoves;
	}
}
