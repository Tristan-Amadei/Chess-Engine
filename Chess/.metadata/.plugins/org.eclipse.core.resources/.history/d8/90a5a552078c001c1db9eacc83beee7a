package game.pieces;

import java.util.HashSet;
import java.util.List;

import AI.Coup;
import chess.Pawn;
import chess.Square;
import game.Board;
import game.pieces.PieceTypeClass.PieceType;

public class Pawn extends Piece{

	public Pawn(final boolean color) {
		super(PieceType.Pawn, color);
	}
	
	public void display() {
		if (color) {
			System.out.print(" W Pawn ");
		} else {
			System.out.print(" B Pawn ");
		}
	}
	
	public HashSet<Short> possibleMoves(Board board, int line, int colonne) {
		HashSet<Short> moves = new HashSet<>();
		short new_coordinate;
		
		if (color) {
			if (line-1>=0 && board.board[line-1][colonne] == null) { // le pion peut avancer
				new_coordinate = (short) (10*(line-1) + colonne);
				moves.add(new_coordinate);
			}
			if (line-1>=0 && colonne-1 >=0 && board.board[line-1][colonne-1] != null && board.board[line-1][colonne-1].color != color ) { //capture a gauche
				new_coordinate = (short) (10*(line-1) + colonne-1);
				moves.add(new_coordinate);
			}
			if (line-1>=0 && colonne+1 <8 && board.board[line-1][colonne+1] != null && board.board[line-1][colonne+1].color != color) { //capture a  droite
				new_coordinate = (short) (10*(line-1) + colonne+1);
				moves.add(new_coordinate);
			}
			if (line==6 && board.board[line-1][colonne] == null && board.board[line-2][colonne] == null) { //pion a sa position de depart, peut avancer de 2 cases
				new_coordinate = (short) (10*(line-2) + colonne);
				moves.add(new_coordinate);
			}
		} else {
			if (line+1<8 && board.board[line+1][colonne] == null) {
				new_coordinate = (short) (10*(line+1) + colonne);
				moves.add(new_coordinate);
			}
			if (line+1<8 && colonne-1>=0 && board.board[line+1][colonne-1] != null && board.board[line+1][colonne-1].color != color) {
				new_coordinate = (short) (10*(line+1) + colonne-1);
				moves.add(new_coordinate);
			}
			if (line+1<8 && colonne+1<8 && board.board[line+1][colonne+1] != null && board.board[line+1][colonne+1].color != color) {
				new_coordinate = (short) (10*(line+1) + colonne+1);
				moves.add(new_coordinate);
			}
			if (line==1 && board.board[line+1][colonne] == null && board.board[line+2][colonne] == null) {
				new_coordinate = (short) (10*(line+2) + colonne);
				moves.add(new_coordinate);
			}
		}
		return moves;
	}
	
	public HashSet<Short> enPassant(Board board, int line, int colonne) {
		List<Move> moves = board.movesPlayed;
		Move lastMove = moves.get(moves.size()-1);
		
		Square[] liste_coups = new Square[2];
		int nb_coups = 0;
		if (board.colorToPlay == "White" && ligne==3) {
			if (lastMove.piece_a_deplacer instanceof Pawn && lastMove.ligne_position_initiale_piece_a_deplacer == 1 && lastMove.colonne_position_initiale_piece_a_deplacer == colonne-1 && lastMove.ligne_case_deplacement_piece==3 && lastMove.colonne_case_deplacement_piece==colonne-1) {
				liste_coups[nb_coups] = board.board[2][colonne-1];
				nb_coups++;
			}
			if (lastMove.piece_a_deplacer instanceof Pawn && lastMove.ligne_position_initiale_piece_a_deplacer == 1 && lastMove.colonne_position_initiale_piece_a_deplacer == colonne+1 && lastMove.ligne_case_deplacement_piece==3 && lastMove.colonne_case_deplacement_piece==colonne+1) {
				liste_coups[nb_coups] = board.board[2][colonne+1];
				nb_coups++;
			}
		} 
		if (board.colorToPlay == "Black" && ligne == 4) {
			if (lastMove.piece_a_deplacer instanceof Pawn && lastMove.ligne_position_initiale_piece_a_deplacer == 6 && lastMove.colonne_position_initiale_piece_a_deplacer == colonne-1 && lastMove.ligne_case_deplacement_piece==4 && lastMove.colonne_case_deplacement_piece==colonne-1) {
				liste_coups[nb_coups] = board.board[5][colonne-1];
				nb_coups++;
			}
			if (lastMove.piece_a_deplacer instanceof Pawn && lastMove.ligne_position_initiale_piece_a_deplacer == 6 && lastMove.colonne_position_initiale_piece_a_deplacer == colonne+1 && lastMove.ligne_case_deplacement_piece == 4 && lastMove.colonne_case_deplacement_piece==colonne+1) {
				liste_coups[nb_coups] = board.board[5][colonne+1];
				nb_coups++;
			}
			
		}
	}
}
